// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManagerChannel.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220108094027_create-dataseting")]
    partial class createdataseting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Authorization.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "4d01b5d9-6458-4258-a03d-7852ac6c43a9",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 678, DateTimeKind.Local).AddTicks(6827),
                            IsDeleted = false,
                            Name = "application_admin"
                        },
                        new
                        {
                            Id = "4d01b5d9-6458-4258-a03d-7852ac6c43b8",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 678, DateTimeKind.Local).AddTicks(7341),
                            IsDeleted = false,
                            Name = "application_user"
                        });
                });

            modelBuilder.Entity("API.Models.Authorization.RolePermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = "5054f402-1c8d-407a-a8a9-8aff08ebfa76",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 678, DateTimeKind.Local).AddTicks(9442),
                            IsDeleted = false,
                            Permission = 0,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9"
                        },
                        new
                        {
                            Id = "1c0ad5d4-4bf9-4f0f-a9d5-d674e9fdc85a",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 679, DateTimeKind.Local).AddTicks(216),
                            IsDeleted = false,
                            Permission = 100000000,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9"
                        },
                        new
                        {
                            Id = "5b53f070-2416-4200-b49c-b4eb1b0967eb",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 679, DateTimeKind.Local).AddTicks(224),
                            IsDeleted = false,
                            Permission = 200000000,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9"
                        },
                        new
                        {
                            Id = "cc2ee4b8-75e3-493f-a634-a9dba28e646f",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 679, DateTimeKind.Local).AddTicks(227),
                            IsDeleted = false,
                            Permission = 300000000,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9"
                        },
                        new
                        {
                            Id = "8fa9274f-42e1-4065-aadd-119eb09556fa",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 679, DateTimeKind.Local).AddTicks(230),
                            IsDeleted = false,
                            Permission = 0,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43b8"
                        });
                });

            modelBuilder.Entity("API.Models.Authorization.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 677, DateTimeKind.Local).AddTicks(2835),
                            IsDeleted = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("API.Models.Authorization.UserRestriction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRestriction");
                });

            modelBuilder.Entity("API.Models.Authorization.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9",
                            CreatedDate = new DateTime(2022, 1, 8, 16, 40, 26, 678, DateTimeKind.Local).AddTicks(8042)
                        });
                });

            modelBuilder.Entity("API.Models.Notifications.Notification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("NotificationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserReadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("NotifyToUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("API.Models.Notifications.SendingEmailJob", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JobExecutingBeginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobExecutingByServiceNodeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JobExecutingEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobResult")
                        .HasColumnType("int");

                    b.Property<int>("JobState")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToCcAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("SedingEmailJob");
                });

            modelBuilder.Entity("API.Models.Support.Tutorial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Tutorials");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.Network_Channel_History", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NetWorkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("NetworkRate")
                        .HasColumnType("real");

                    b.Property<string>("Network_UserRoleInTeamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network_UserRoleInTeamNetwork_PaymentAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Network_UserRoleInTeamUserRoleInTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YoutubeChannelChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NetWorkId");

                    b.HasIndex("PaymentAccountId");

                    b.HasIndex("YoutubeChannelChannelId");

                    b.HasIndex("Network_UserRoleInTeamUserRoleInTeamId", "Network_UserRoleInTeamNetwork_PaymentAccountId");

                    b.ToTable("Network_Channel_History");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.ReportDataChannelDaily", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("AverageViewDurationInSecond")
                        .HasColumnType("real");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CountVideo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMonetize")
                        .HasColumnType("bit");

                    b.Property<float>("NetworkRate")
                        .HasColumnType("real");

                    b.Property<string>("Network_UserRoleInTeamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network_UserRoleInTeamNetwork_PaymentAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Network_UserRoleInTeamUserRoleInTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RevenueGain")
                        .HasColumnType("bigint");

                    b.Property<long>("SubscriberCount")
                        .HasColumnType("bigint");

                    b.Property<long>("SubscriberGain")
                        .HasColumnType("bigint");

                    b.Property<int>("USRevenueGain")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.Property<long>("ViewGain")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("Network_UserRoleInTeamUserRoleInTeamId", "Network_UserRoleInTeamNetwork_PaymentAccountId");

                    b.ToTable("ReportDataChannelDailies");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.ReportDataVideoDaily", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("AverageViewDurationInSecond")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMonetize")
                        .HasColumnType("bit");

                    b.Property<long>("RevenueGain")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.Property<long>("ViewGain")
                        .HasColumnType("bigint");

                    b.Property<int>("likeCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("ReportDataVideoDaily");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.UserRole_YoutubeChannel", b =>
                {
                    b.Property<string>("UserRoleInTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserRoleInTeamId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("UserRole_YoutubeChannels");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.User_YoutubeChannelHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("YoutubeChannelChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("YoutubeChannelChannelId");

                    b.ToTable("User_YoutubeChannelHistory");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.Video", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CommentCount")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClamed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletedByChannelManager")
                        .HasColumnType("bit");

                    b.Property<long>("LikeCount")
                        .HasColumnType("bigint");

                    b.Property<string>("LinkThumbnails_High")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.YoutubeChannel", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CountVideo")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Etag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HiddenSubscriberCount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkThumbnails_High")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("NetworkRate")
                        .HasColumnType("real");

                    b.Property<string>("ProjectGoogleApiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartPayment")
                        .HasColumnType("datetime2");

                    b.Property<long>("SubscriberCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("ChannelId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("ProjectGoogleApiId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("YoutubeChannels");
                });

            modelBuilder.Entity("ManagerChannel.Models.ManagementProject.Project", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ManagementId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ManagerChannel.Models.ManagementProject.ProjectRegulation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Warning")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ProjectRegulation");
                });

            modelBuilder.Entity("ManagerChannel.Models.ManagementProject.Project_UserRoleInTeam", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserRoleInTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId", "UserRoleInTeamId");

                    b.HasIndex("UserRoleInTeamId");

                    b.ToTable("ProjectUserRoleInTeams");
                });

            modelBuilder.Entity("ManagerChannel.Models.Networks.NetWork", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("NetWorks");
                });

            modelBuilder.Entity("ManagerChannel.Models.Networks.Network_PaymentAccount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NetworkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("NetworkRate")
                        .HasColumnType("real");

                    b.Property<string>("PaymentAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("PaymentAccountId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Network_PaymentAccount");
                });

            modelBuilder.Entity("ManagerChannel.Models.Networks.Network_UserRoleInTeam", b =>
                {
                    b.Property<string>("UserRoleInTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Network_PaymentAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserRoleInTeamId", "Network_PaymentAccountId");

                    b.HasIndex("Network_PaymentAccountId");

                    b.ToTable("Network_UserRoleIns");
                });

            modelBuilder.Entity("ManagerChannel.Models.Pay.PaymentAccount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("PaymentAccounts");
                });

            modelBuilder.Entity("ManagerChannel.Models.ProjectGoogleApies.ProjectGoogleApi", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountQuotaimpact")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeProjectGoogleApi")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ProjectGoogleApis");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.RoleInTeam", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RoleInTeams");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.RolePermissionInTeam", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RolePermissionInTeams");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.Team", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ParentTeamId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.UserRoleInTeam", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleInTeams");
                });

            modelBuilder.Entity("API.Models.Authorization.Role", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Authorization.RolePermission", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Authorization.UserRestriction", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "User")
                        .WithMany("UserRestrictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Authorization.UserRole", b =>
                {
                    b.HasOne("API.Models.Authorization.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Authorization.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Notifications.Notification", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "NotifyToUser")
                        .WithMany()
                        .HasForeignKey("NotifyToUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("NotifyToUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Notifications.SendingEmailJob", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Support.Tutorial", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.Network_Channel_History", b =>
                {
                    b.HasOne("ManagerChannel.Models.Networks.NetWork", null)
                        .WithMany("NetWorkHistories")
                        .HasForeignKey("NetWorkId");

                    b.HasOne("ManagerChannel.Models.Pay.PaymentAccount", "PaymentAccount")
                        .WithMany()
                        .HasForeignKey("PaymentAccountId");

                    b.HasOne("ManagerChannel.Models.Channels.YoutubeChannel", "YoutubeChannel")
                        .WithMany("NetWorkHistories")
                        .HasForeignKey("YoutubeChannelChannelId");

                    b.HasOne("ManagerChannel.Models.Networks.Network_UserRoleInTeam", "Network_UserRoleInTeam")
                        .WithMany()
                        .HasForeignKey("Network_UserRoleInTeamUserRoleInTeamId", "Network_UserRoleInTeamNetwork_PaymentAccountId");

                    b.Navigation("Network_UserRoleInTeam");

                    b.Navigation("PaymentAccount");

                    b.Navigation("YoutubeChannel");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.ReportDataChannelDaily", b =>
                {
                    b.HasOne("ManagerChannel.Models.Channels.YoutubeChannel", "YoutubeChannel")
                        .WithMany("ReportDataChannelDailies")
                        .HasForeignKey("ChannelId");

                    b.HasOne("ManagerChannel.Models.Networks.Network_UserRoleInTeam", "Network_UserRoleInTeam")
                        .WithMany()
                        .HasForeignKey("Network_UserRoleInTeamUserRoleInTeamId", "Network_UserRoleInTeamNetwork_PaymentAccountId");

                    b.Navigation("Network_UserRoleInTeam");

                    b.Navigation("YoutubeChannel");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.ReportDataVideoDaily", b =>
                {
                    b.HasOne("ManagerChannel.Models.Channels.Video", "Video")
                        .WithMany("ReportDataVideoDailies")
                        .HasForeignKey("VideoId");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.UserRole_YoutubeChannel", b =>
                {
                    b.HasOne("ManagerChannel.Models.Channels.YoutubeChannel", "YoutubeChannel")
                        .WithMany("UserRole_YoutubeChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerChannel.Models.Teams.UserRoleInTeam", "UserRoleInTeam")
                        .WithMany("UserRole_YoutubeChannels")
                        .HasForeignKey("UserRoleInTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRoleInTeam");

                    b.Navigation("YoutubeChannel");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.User_YoutubeChannelHistory", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "User")
                        .WithMany("User_YoutubeChannelHistories")
                        .HasForeignKey("UserId");

                    b.HasOne("ManagerChannel.Models.Channels.YoutubeChannel", "YoutubeChannel")
                        .WithMany("UserChannelHistories")
                        .HasForeignKey("YoutubeChannelChannelId");

                    b.Navigation("User");

                    b.Navigation("YoutubeChannel");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.Video", b =>
                {
                    b.HasOne("ManagerChannel.Models.Channels.YoutubeChannel", "Channel")
                        .WithMany("Videos")
                        .HasForeignKey("ChannelId");

                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("Channel");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.YoutubeChannel", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("ManagerChannel.Models.Networks.NetWork", "NetWork")
                        .WithMany()
                        .HasForeignKey("NetworkId");

                    b.HasOne("ManagerChannel.Models.ProjectGoogleApies.ProjectGoogleApi", "ProjectGoogleApi")
                        .WithMany("YoutubeChannels")
                        .HasForeignKey("ProjectGoogleApiId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("NetWork");

                    b.Navigation("ProjectGoogleApi");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.ManagementProject.Project", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerChannel.Models.ManagementProject.ProjectRegulation", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("ManagerChannel.Models.ManagementProject.Project", "Project")
                        .WithMany("ProjectRegulations")
                        .HasForeignKey("ProjectId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Project");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.ManagementProject.Project_UserRoleInTeam", b =>
                {
                    b.HasOne("ManagerChannel.Models.ManagementProject.Project", "Project")
                        .WithMany("Project_UserRoleInTeams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerChannel.Models.Teams.UserRoleInTeam", "UserRoleInTeam")
                        .WithMany("ProjectRoles")
                        .HasForeignKey("UserRoleInTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserRoleInTeam");
                });

            modelBuilder.Entity("ManagerChannel.Models.Networks.NetWork", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.Networks.Network_PaymentAccount", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("ManagerChannel.Models.Networks.NetWork", "NetWork")
                        .WithMany("Network_PaymentAccounts")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerChannel.Models.Pay.PaymentAccount", "PaymentAccount")
                        .WithMany("Network_PaymentAccounts")
                        .HasForeignKey("PaymentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("NetWork");

                    b.Navigation("PaymentAccount");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.Networks.Network_UserRoleInTeam", b =>
                {
                    b.HasOne("ManagerChannel.Models.Networks.Network_PaymentAccount", "Network_PaymentAccount")
                        .WithMany("Network_UserRoleInTeams")
                        .HasForeignKey("Network_PaymentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerChannel.Models.Teams.UserRoleInTeam", "UserRoleInTeam")
                        .WithMany("NetWorkRoles")
                        .HasForeignKey("UserRoleInTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network_PaymentAccount");

                    b.Navigation("UserRoleInTeam");
                });

            modelBuilder.Entity("ManagerChannel.Models.Pay.PaymentAccount", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.ProjectGoogleApies.ProjectGoogleApi", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.RoleInTeam", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.RolePermissionInTeam", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("ManagerChannel.Models.Teams.RoleInTeam", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.Team", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("ManagerChannel.Models.Teams.Team", "ParentTeam")
                        .WithMany("SubTeams")
                        .HasForeignKey("ParentTeamId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ParentTeam");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.UserRoleInTeam", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("ManagerChannel.Models.Teams.RoleInTeam", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerChannel.Models.Teams.Team", "Team")
                        .WithMany("UserRolesInTeam")
                        .HasForeignKey("TeamId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "User")
                        .WithMany("UserRoleInTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Role");

                    b.Navigation("Team");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Authorization.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Models.Authorization.User", b =>
                {
                    b.Navigation("User_YoutubeChannelHistories");

                    b.Navigation("UserRestrictions");

                    b.Navigation("UserRoleInTeams");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.Video", b =>
                {
                    b.Navigation("ReportDataVideoDailies");
                });

            modelBuilder.Entity("ManagerChannel.Models.Channels.YoutubeChannel", b =>
                {
                    b.Navigation("NetWorkHistories");

                    b.Navigation("ReportDataChannelDailies");

                    b.Navigation("UserChannelHistories");

                    b.Navigation("UserRole_YoutubeChannels");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("ManagerChannel.Models.ManagementProject.Project", b =>
                {
                    b.Navigation("Project_UserRoleInTeams");

                    b.Navigation("ProjectRegulations");
                });

            modelBuilder.Entity("ManagerChannel.Models.Networks.NetWork", b =>
                {
                    b.Navigation("Network_PaymentAccounts");

                    b.Navigation("NetWorkHistories");
                });

            modelBuilder.Entity("ManagerChannel.Models.Networks.Network_PaymentAccount", b =>
                {
                    b.Navigation("Network_UserRoleInTeams");
                });

            modelBuilder.Entity("ManagerChannel.Models.Pay.PaymentAccount", b =>
                {
                    b.Navigation("Network_PaymentAccounts");
                });

            modelBuilder.Entity("ManagerChannel.Models.ProjectGoogleApies.ProjectGoogleApi", b =>
                {
                    b.Navigation("YoutubeChannels");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.RoleInTeam", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.Team", b =>
                {
                    b.Navigation("SubTeams");

                    b.Navigation("UserRolesInTeam");
                });

            modelBuilder.Entity("ManagerChannel.Models.Teams.UserRoleInTeam", b =>
                {
                    b.Navigation("NetWorkRoles");

                    b.Navigation("ProjectRoles");

                    b.Navigation("UserRole_YoutubeChannels");
                });
#pragma warning restore 612, 618
        }
    }
}
